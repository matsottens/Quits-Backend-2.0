/**
 * Extract subscription details from the Gemini API response
 * @param summary The summary generated by Gemini
 * @returns The extracted subscription details or null if not a subscription
 */
export function extractSubscriptionDetails(summary: any): any | null {
  try {
    // If not a subscription or confidence too low, return null
    if (!summary.isSubscription || summary.confidence < 0.6) {
      return null;
    }
    
    // Format the next billing date if available
    let nextBillingDate = summary.nextBillingDate;
    if (nextBillingDate && !isValidDate(nextBillingDate)) {
      // Try to convert to YYYY-MM-DD format if possible
      const parsedDate = new Date(nextBillingDate);
      if (!isNaN(parsedDate.getTime())) {
        nextBillingDate = parsedDate.toISOString().split('T')[0];
      } else {
        nextBillingDate = null;
      }
    }
    
    // Clean up and normalize the billing cycle
    let billingCycle = summary.billingCycle?.toLowerCase() || '';
    if (billingCycle.includes('month')) {
      billingCycle = 'monthly';
    } else if (billingCycle.includes('year')) {
      billingCycle = 'yearly';
    } else if (billingCycle.includes('week')) {
      billingCycle = 'weekly';
    } else if (billingCycle.includes('day')) {
      billingCycle = 'daily';
    }
    
    return {
      name: summary.name || 'Unknown Subscription',
      price: parseFloat(summary.price) || 0,
      currency: summary.currency || 'USD',
      billingCycle,
      nextBillingDate,
      provider: summary.provider || '',
      category: summary.category || '',
    };
  } catch (error) {
    console.error('Error extracting subscription details:', error);
    return null;
  }
}

/**
 * Check if a string is a valid date in YYYY-MM-DD format
 */
function isValidDate(dateString: string): boolean {
  if (!dateString) return false;
  
  // Check format
  const regex = /^\d{4}-\d{2}-\d{2}$/;
  if (!regex.test(dateString)) return false;
  
  // Check if it's a valid date
  const date = new Date(dateString);
  if (isNaN(date.getTime())) return false;
  
  return true;
} 